@typeparam TItem
@using System.Diagnostics.CodeAnalysis

<div class="datatable">
    <div class="row">
        <div class="col-sm-12 col-md-6">
            @if (DataLengthAttribute.IsEnabled<TItem>())
            {
                <div class="dataTables_length" id="basic-datatable_length">
                    <label class="form-label">
                        <select name="basic-datatable_length" class="form-control form-control-sm form-select form-select-sm" @onchange="OnLengthChangeAsync">
                            @foreach (var length in DataLengthAttribute.GetLengths<TItem>())
                            {
                                <option value="@length" selected="@(TableData.Length == length)">@length</option>
                            }
                        </select>
                    </label>
                </div>
            }
        </div>
        <div class="col-sm-12 col-md-6">
            @if (Columns.Searchable())
            {
                <div id="basic-datatable_filter" class="dataTables_filter">
                    <label>Search:<input type="search" class="form-control form-control-sm" placeholder="" aria-controls="basic-datatable" @bind="TableData.SearchInput" @oninput="OnSearchChange"></label>
                </div>
            }
        </div>
    </div>
    <table @attributes="InputAttributes">
        <thead>
            <tr>
                @if (TableHead is not null)
                {
                    @foreach (var col in Columns.Where(x => x.Render))
                    {
                        var param = new TemplateTableHeadModel<TItem>(Items, col.PropertyInfo);
                        <CascadingValue Value="col">
                            @TableHead(param)
                        </CascadingValue>

                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                if (TableBody is not null)
                {
                    <tr>
                        @foreach (var col in Columns.Where(x => x.Render))
                        {
                            var param = new TemplateTableBodyModel<TItem>(Items, item, col.PropertyInfo);

                            @* this will be passed to ColumnName in the Column Component*@
                            <CascadingValue Value="param.Name">
                                @TableBody(param)
                            </CascadingValue>

                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="row">
        <div class="col-sm-12 col-md-5">
            <div class="result-descriptor">
                @TableData.GetResultdescriptor()
            </div>
        </div>
        <div class="col-sm-12 col-md-7">
            <ul class="page-list">
                <li class="page-li first @(TableData.Page==1?"disabled":"")">
                    <a href="" class="page-button" @onclick="TableData.SetPageFirstAsync" @onclick:preventDefault>
                        First
                    </a>
                </li>
                <li class="page-li left @(TableData.Page==1?"disabled":"")">
                    <a href="" class="page-button" @onclick="TableData.SetPagePreviousAsync" @onclick:preventDefault>
                        &lt;
                    </a>
                </li>
                <li class="page-li active">
                    <a href="" class="page-button" @onclick:preventDefault>@TableData.Page</a>
                </li>
                <li class="page-li right @(TableData.Page==TableData.TotalPages?"disabled":"")">
                    <a href="" class="page-button" @onclick="TableData.SetPageNextAsync" @onclick:preventDefault>
                        >
                    </a>
                </li>
                <li class="page-li last @(TableData.Page==TableData.TotalPages?"disabled":"")">
                    <a href="" class="page-button" @onclick="TableData.SetPageLastAsync" @onclick:preventDefault>
                        Last
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>
